plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.firebase-perf'
    id 'com.google.firebase.crashlytics'
    id 'com.google.protobuf'
}

repositories {
    jcenter()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

def get3rdPartyDir() {
    Properties properties = new Properties()
    properties.load(new File(rootDir.absolutePath + "/local.properties").newDataInputStream())
    def externalModuleDir = properties.getProperty('3rdparty.dir', null)
    if (externalModuleDir == null) {
        throw new GradleException(
                "3rdparty location not found. Define location with 3rdparty.dir in the local.properties file!")
    }
    return externalModuleDir
}


android {
    compileSdkVersion 32
    // use specific NDK version
    ndkVersion '23.1.7779620'

    signingConfigs {
        release {
            // Load keystore, you should have a file named keystore.properties in the root directory of the project
            def keystorePropertiesFile = rootProject.file("keystore.properties");
            def keystoreFile = ""
            def keystorePassword = ""
            def keystoreKeyAlias = ""
            def keystoreKeyPassword = ""

            if (keystorePropertiesFile.exists()) {
                logger.info('keystore.properties file found, loading keystore properties ...')
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                keystoreFile = keystoreProperties['storeFile']
                keystorePassword = keystoreProperties['storePassword']
                keystoreKeyAlias = keystoreProperties['keyAlias']
                keystoreKeyPassword = keystoreProperties['keyPassword']
            } else {
                logger.warn('No keystore.properties file found, assuming CI build ...')
                // if not: we probably run on the CI and we get the keystore from the environment variable, which
                // is redirected to a temporary file in the CI script
                def tmpFilePath = System.getProperty("user.home") + "/work/_temp/keystore/"
                def allFilesFromDir = new File(tmpFilePath).listFiles()
                if (allFilesFromDir != null) {
                    def keystoreFiles = allFilesFromDir.first()
                    def keystoreFilename = "keystore/simaromur_ks.jks"
                    keystoreFiles.renameTo(keystoreFilename)
                    keystoreFile = keystoreFilename
                    keystorePassword = System.getenv("SIGNING_STORE_PASSWORD")
                    keystoreKeyAlias = System.getenv("SIGNING_KEY_ALIAS")
                    keystoreKeyPassword = System.getenv("SIGNING_KEY_PASSWORD")
                } else {
                    logger.error('No keystore file found in ' + tmpFilePath)
                    throw new GradleException('No keystore file found in ' + tmpFilePath)
                }
            }

            storeFile = file(keystoreFile)
            storePassword = keystorePassword
            keyAlias = keystoreKeyAlias
            keyPassword = keystoreKeyPassword
        }
    }

    defaultConfig {
        applicationId "com.grammatek.simaromur"
        minSdkVersion 26
        targetSdkVersion 32
        versionCode 24
        versionName "1.2.1"

        testInstrumentationRunner  "androidx.test.runner.AndroidJUnitRunner"
        // testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                arguments "-DTHIRD_PARTY_DIR="+get3rdPartyDir()
                arguments "-DCMAKE_VERBOSE_MAKEFILE=ON"
                cppFlags "-std=c++17"
            }
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        signingConfig signingConfigs.release
    }

    sourceSets {
        project.logger.lifecycle('$projectDir/schemas: ' + "$projectDir/schemas".toString())
        androidTest.assets.srcDirs +=
                files("$projectDir/schemas".toString())
        debug.assets.srcDirs +=
                files("$projectDir/schemas".toString())
        release.assets.srcDirs +=
                files("$projectDir/schemas".toString())
    }
    buildTypes {
        debug {
            debuggable true
        }

        release {
            firebaseCrashlytics {
                nativeSymbolUploadEnabled true
            }

            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled true

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro', 'okio.pro', 'retrofit2.pro', 'gson.pro'
            ndk {
                debugSymbolLevel 'full'
            }
            signingConfig signingConfigs.release
        }
    }
    externalNativeBuild {
        cmake {
            version "3.22.1"
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    testOptions {
        unitTests.includeAndroidResources = true
    }

    lintOptions {
        abortOnError false
    }

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
    dependenciesInfo {
        includeInApk true
        includeInBundle true
    }
}

protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.21.0' }

    generateProtoTasks {
        all().each { task ->
            task.builtins{
                java { option 'lite' }
            }
        }
    }
}

dependencies {

    // not yet applicable
    //implementation files('libs/opennlp-tools-1.9.3.jar')
    implementation files('libs/opennlp-tools-1.6.0.jar')
    implementation 'org.apache.commons:commons-collections4:4.4'

    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.2.0'
    implementation 'androidx.datastore:datastore-rxjava3:1.0.0'

    // Core library
    androidTestImplementation 'androidx.test:core:1.4.0'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'

    // Assertions
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.ext:truth:1.4.0'

    // Espresso dependencies, need to exclude protobuf-lite, because of
    // https://github.com/android/android-test/issues/999
    androidTestImplementation ('androidx.test.espresso:espresso-core:3.4.0') {
        exclude group: "com.google.protobuf", module: "protobuf-lite"
    }
    androidTestImplementation ('androidx.test.espresso:espresso-contrib:3.4.0') {
        exclude group: "com.google.protobuf", module: "protobuf-lite"
    }
    androidTestImplementation ('androidx.test.espresso:espresso-intents:3.4.0') {
        exclude group: "com.google.protobuf", module: "protobuf-lite"
    }
    androidTestImplementation ('androidx.test.espresso:espresso-accessibility:3.4.0') {
        exclude group: "com.google.protobuf", module: "protobuf-lite"
    }
    androidTestImplementation ('androidx.test.espresso:espresso-web:3.4.0') {
        exclude group: "com.google.protobuf", module: "protobuf-lite"
    }
    androidTestImplementation ('androidx.test.espresso.idling:idling-concurrent:3.4.0') {
        exclude group: "com.google.protobuf", module: "protobuf-lite"
    }

    // The following Espresso dependency can be either "implementation"
    // or "androidTestImplementation", depending on whether you want the
    // dependency to appear on your APK's compile classpath or the test APK
    // classpath.
    androidTestImplementation ('androidx.test.espresso:espresso-idling-resource:3.4.0') {
        exclude group: "com.google.protobuf", module: "protobuf-lite"
    }

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test:core:1.4.0'
    testImplementation 'androidx.test:core-ktx:1.4.0'
    testImplementation 'androidx.test.ext:junit-ktx:1.1.3'
    testImplementation 'org.mockito:mockito-core:4.8.0'
    testImplementation 'com.google.truth:truth:1.1.3'

    // implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'org.robolectric:robolectric:4.9'

    // Room
    def room_version = "2.5.0-alpha02"

    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    // optional - Test helpers
    testImplementation "androidx.room:room-testing:$room_version"

    // retrofit
    implementation 'com.google.code.gson:gson:2.9.1'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.10'

    // Import the Firebase BoM
    // When using the BoM, don't specify versions in Firebase dependencies
    implementation platform('com.google.firebase:firebase-bom:30.5.0')

    // Add the dependency for the Firebase SDKs
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-crashlytics-ndk'
    implementation 'com.google.firebase:firebase-inappmessaging-display'
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-perf'

    // Add the dependencies for any other desired Firebase products
    // https://firebase.google.com/docs/android/setup#available-libraries

    // Add PyTorch dependencies
    implementation 'org.pytorch:pytorch_android_lite:1.12.2'

    // Add Tensorflow lite dependencies, not needed, therefore disabling it because the release
    // binary gets too big !
    //implementation 'org.tensorflow:tensorflow-lite:2.6.0'
    //implementation 'org.tensorflow:tensorflow-lite-support:0.3.0'
    //implementation 'org.tensorflow:tensorflow-lite-select-tf-ops:2.6.0'

    implementation "androidx.datastore:datastore:1.0.0"

    // Github API
    implementation 'org.kohsuke:github-api:1.313'
}

// Saves last modified date of bundled assets, so we can determine when
// to copy these over to the apps data path
task saveAllAssetDate {
    def assetDirectory = "src/main/assets"
    def text = ""
    fileTree(assetDirectory).visit { FileVisitDetails details ->
        def name = details.file.path
        name = name.substring(name.indexOf("assets"))
        text += details.getLastModified() + " " + name + "\n"
    }
    file(assetDirectory + "/lastModified.txt").text = "" + text
}
build.dependsOn saveAllAssetDate
